{
 "metadata": {
  "name": "",
  "signature": "sha256:2aa7d493064ec1ff136152de00796576c3b3afb223f4deed60441d210505c92b"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Introduction to grain.py"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "The class grain.py was developed to interact with the presolar grain database that is maintained at Washington University in St. Louis and is described here: http://adsabs.harvard.edu/abs/2009LPI....40.1198H Please note that every measurement is in there, which is sometimes a little overwhelming, especially if bad datasets are present too. \n",
      "\n",
      "Enough talk, let's load the database and get all grain data into a instance g."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import grain\n",
      "g = grain.gdb()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This just loaded all the grain data available. At any point, you can have a look at what filters are applied / how many grains are in the database."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.info(reference=True)   # Lot's of references, that's why they are normally turned off"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Pretty cool, but usually you don't want to compare your models to all grains available. The grain class has some filters that you can use. You can use filters for the description of the data (e.g., graintype, reference, etc.) or filters on the data (e.g., uncertainties, ratios, etc.). Presolar grain data is often displayed in delta values. Those are isotopic ratios  $^{i}A/^{j}A$ are defined as:\n",
      "$$ \\delta\\left( ^{i}A/^{j}A \\right) = \\left( \\frac{^{i}A/^{j}A_{measured}}{^{i}A/^{j}A_{standard}} - 1 \\right) \\times 1000$$\n",
      "This equation therefore gives us the deviation of the measurement from the standard in per mille. In terms of presolar grains, the standard is usually assumed to be solar system composition.\n",
      "\n",
      "Let's grab all the Silicon data first for SiC mainstream grains with uncertainties better than 10 per mille."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "xiso=['Si-30','Si-28']\n",
      "yiso=['Si-29','Si-28']\n",
      "g.filter_desc(graintype='M')   # to filter for mainstream grains\n",
      "g.filter_uncertainty(xiso,'<10.')\n",
      "g.filter_uncertainty(yiso,'<10.')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Let's see if it worked and plot those data"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.plot_isoratios(xiso,yiso)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "There's also a filter to filter for individual grains and to filter for different data. Check that out if you want. Most things work very similar to what we have just done here.\n",
      "\n",
      "While the grain class chooses very pretty symbols and colors by itself, you can change the style and stuff yourself if you want. Check out the style and associations first:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"This is the association of all things in the arrays\"\n",
      "g.styledict"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"And here the values that are currently associated\"\n",
      "g.style"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Check the help file for changing the style and let's change the symbol face and edge color to blue, make the grains as triangles, and label them with Mainstream SiC."
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.style_chg_label('SiC M',symb='^',fac='b',edc='b',lab='Mainstream SiC')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.style"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Let's check if it worked - easiest is if we just plot the data again!"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "g.plot_isoratios(xiso,yiso)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Questions, suggestions, feel free to send me an e-mail! trappitsch@uchicago.edu"
     ]
    }
   ],
   "metadata": {}
  }
 ]
}