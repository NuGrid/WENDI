""" 
widget_utils.py

This module provides extra functions and classes to aid in the
production of interactive interfaces using the widget_framework.py
module.
"""

import re
import keyword
import __builtin__

class auto_styles:
    """ 
    auto_styles provides automatic generation of unique matplotlib line
    styles. The initalization function takes no arguments.
    
    By default the class automaticaly assignes a style using all
    available matplotlib styles.
    """
    def __init__(self):
        self._line_count = 0
        self._line_styles = ["-", "--", "-.", ":", "None", " ", ""]
        self._line_colors = ["b", "g", "r", "c", "m", "y", "k", "w"]
        self._line_markers = ["." ,",", "o", "v", "^", "<", ">", "1", "2", "3", "4", "8", "s", "p", "*", "h", "H", "+", "X", "D", "d", "|", "_", "None", None, " ", ""]
    
    def set_line_styles(self, line_styles):
        """ 
        The set_line_styles method sets the avialable line styles for
        the instance.
        
        Parameters
        ----------
        line_styles : list
            A list of matplotlib line styles. If an empty list is given,
            then no matplotlib linestyle will be assigned.
        """
        self._line_styles = line_styles
    
    def set_line_colors(self, line_colors):
        """ 
        The set_line_colors method sets the avialable line colors for
        the instance.
        
        Parameters
        ----------
        line_colors : list
            A list of matplotlib line colors. If an empty list is given,
            then no matplotlib linecolor will be assigned.
        """
        self._line_colors = line_colors
    
    def set_line_markers(self, line_markers):
        """ 
        The set_line_markers method sets the avialable line markers for
        the instance.
        
        Parameters
        ----------
        line_markers : list
            A list of matplotlib line markers. If an empty list is
            given, then no matplotlib linemarker will be assigned.
        """
        self._line_markers = line_markers
    
    def reset_line_count(self):
        """ 
        The reset_line_count method resets the internaly stored style
        counter. This method should be called to reset the produced
        line styles.
        """
        self._line_count = 0
        
    def get_style(self):
        """ 
        The get_style method generates and returns a unique line style.
        The style generated by this method is determined by the number
        of styles produced since the instance was last reset. There are
        a finite number of unique line styles, the specific nuber of
        linestyles is determined by the number of linestyles linecolors
        and linkemarkers used for the given instance.
        
        The linestyle is returned as a dict, the linestyle linecolor and
        linemarker are stored under the standard matplotlib argument
        names 'shape', 'color' and 'marker' respectivly.
        """
        style = {}
        if len(self._line_styles) != 0:
            line_style = self._line_styles[self._line_count % len(self._line_styles)]
            style["shape"] = line_style

        if len(self._line_colors) != 0:
            line_color = self._line_colors[self._line_count % len(self._line_colors)]
            style["color"] = line_color

        if len(self._line_markers) != 0:
            line_marker = self._line_markers[self._line_count % len(self._line_markers)]
            style["marker"] = line_marker
            
        self._line_count += 1
        return style

def float_text(string):
    for i in xrange(len(string)):
        if float_substring(string[:len(string)-i]):
            return string[:len(string)-i]
    return ""

def int_text(string):
    for i in xrange(len(string)):
        if int_substring(string[:len(string)-i]):
            return string[:len(string)-i]
    return ""

def token_text(string, strict=False):
    for i in xrange(len(string)):
        if token_substring(string[:len(string)-i], strict=strict):
            return string[:len(string)-i]
    return ""
    
def token_substring(string, strict=False):
    string=string.strip()
    if string == "":
        return False
    match = re.match("^[a-zA-Z_]\w*$", string)
    if strict and (keyword.iskeyword(string) or (string in dir(__builtin__))):
        return False
    if (match == None):
        return False
    else:
        return True

def float_substring(string):
    string=string.strip()
    if string == "":
        return True
    special_chars = ["+", "-", ".", "e", "E"]
    try:
        if string[-1] in special_chars:
            string = string + "0"
        float(string)
        return True
    except ValueError:
        return False

def int_substring(string):
    string=string.strip()
    if string == "":
        return True
    special_chars = ["+", "-"]
    try:
        if string[-1] in special_chars:
            string = string + "0"
        int(string)
        return True
    except ValueError:
        return False
